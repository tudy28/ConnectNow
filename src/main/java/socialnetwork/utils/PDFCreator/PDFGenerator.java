package socialnetwork.utils.PDFCreator;

import java.io.FileOutputStream;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import socialnetwork.domain.ReplyMessage;
import socialnetwork.domain.UserPage;
import socialnetwork.domain.Utilizator;
import socialnetwork.domain.UtilizatorPrietenieDTO;
import socialnetwork.service.MessageService;
import socialnetwork.service.UtilizatorService;
import socialnetwork.utils.Constants;


public class PDFGenerator {

    private UserPage userPage;


    public PDFGenerator(UserPage userPage){
        this.userPage=userPage;
    }

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);



    public void addMetaData(Document document) {
        document.addTitle("PDF Report");
    }

    public void addTitlePage(Document document,String description)
            throws DocumentException {
        Paragraph preface = new Paragraph();

        preface.add(new Paragraph("Report of an user", catFont));

        addEmptyLine(preface, 1);
        preface.add(new Paragraph(
                "Report generated by: WeConnect , " + new Date(),
                smallBold));
        preface.add(new Paragraph(description, smallBold));

        document.add(preface);

    }

    public void addFriendships(Document document, Long userID, LocalDate date1, LocalDate date2) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 2);
        preface.add( new Paragraph("The list of users below represents all the users you have become friends with between "+date1+" and "+date2+":", catFont));
        addEmptyLine(preface,1);
        boolean exists=false;
        for(UtilizatorPrietenieDTO u: userPage.getUserFriendBetweenDates(date1,date2)) {
            preface.add(new Paragraph("         " + u, smallBold));
            addEmptyLine(preface,1);
            exists=true;
        }
        if(!exists)
            preface.add((new Paragraph(("         There are no new friends created in this period."),smallBold)));
        document.add(preface);
    }

    public void addMessages(Document document, Long userID, LocalDate date1, LocalDate date2) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 2);
        preface.add( new Paragraph("Below are all the messages received between "+date1+" and "+date2+":", catFont));
        addEmptyLine(preface,1);
        boolean exists=false;
        for(UtilizatorPrietenieDTO u:userPage.getUserFriends()) {
            List<ReplyMessage> messages=userPage.getConversationBetweenDates(u.getId(),date1,date2);
            if(messages.size()!=0) {
                exists=true;
                addEmptyLine(preface,1);
                preface.add(new Paragraph("Messages received from " + u.getFirstName() + " " + u.getLastName() + ":", smallBold));
                for (ReplyMessage m : messages) {
                    String text = "";
                    if (m.getRepliedMessage() == null) {
                        text = m.getDate().format(Constants.DATE_TIME_FORMATTER_NICE) +
                                "\n         " + m.getFrom().getFirstName() + " " + m.getFrom().getLastName() + ": " + m.getMessage() + "\n\n";
                    } else {
                        text = "    Replied at: " + m.getRepliedMessage().getMessage() + "     From: " + m.getRepliedMessage().getFrom().getLastName() + " " + m.getRepliedMessage().getFrom().getFirstName() + "\n         " +
                                m.getDate().format(Constants.DATE_TIME_FORMATTER_NICE) +
                                "\n         " + m.getFrom().getFirstName() + " " + m.getFrom().getLastName() + ": " + m.getMessage() + "\n\n";
                    }
                    preface.add(new Paragraph("         " + text, smallBold));

                }
            }
        }
        if(!exists)
            preface.add((new Paragraph(("         There are no new received messages in this period."),smallBold)));
        document.add(preface);
    }

    public void addMessagesOneUser(Document document, Long userID,Long otherID, LocalDate date1, LocalDate date2) throws DocumentException {

            Paragraph preface = new Paragraph();
            addEmptyLine(preface, 2);
            Utilizator otherUser = userPage.findUser(otherID).get();
            preface.add(new Paragraph("Below are all the messages received from " + otherUser.getFirstName() + " " + otherUser.getLastName() + " between " + date1 + " and " + date2 + ":", catFont));
            addEmptyLine(preface, 1);
            boolean exists = false;

            List<ReplyMessage> messages = userPage.getConversationBetweenDates(otherID, date1, date2);
            if (messages.size() != 0) {
                exists = true;
                addEmptyLine(preface, 1);
                preface.add(new Paragraph("Messages received from " + otherUser.getFirstName() + " " + otherUser.getLastName() + ":", smallBold));
                for (ReplyMessage m : messages) {
                    String text = "";
                    if (m.getRepliedMessage() == null) {
                        text = m.getDate().format(Constants.DATE_TIME_FORMATTER_NICE) +
                                "\n         " + m.getFrom().getFirstName() + " " + m.getFrom().getLastName() + ": " + m.getMessage() + "\n\n";
                    } else {
                        text = "    Replied at: " + m.getRepliedMessage().getMessage() + "     From: " + m.getRepliedMessage().getFrom().getLastName() + " " + m.getRepliedMessage().getFrom().getFirstName() + "\n         " +
                                m.getDate().format(Constants.DATE_TIME_FORMATTER_NICE) +
                                "\n         " + m.getFrom().getFirstName() + " " + m.getFrom().getLastName() + ": " + m.getMessage() + "\n\n";
                    }
                    preface.add(new Paragraph("         " + text, smallBold));

                }
            }
            if (!exists)
                preface.add((new Paragraph(("         There are no new received messages in this period."), smallBold)));
            document.add(preface);
        }



    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
